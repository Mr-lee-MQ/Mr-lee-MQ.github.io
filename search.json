[{"title":"关于微信扫码相关实践","path":"/2023/02/08/关于微信扫码相关实践/","content":"关于微信扫码相关实践 1、实现场景​\t生成微信小程序二维码，通过手机微信扫码跳转到某特定微信小程序地址。 2、代码实现主要分为三步 获取accessToken 生成小程序码 1234567891011121314151617181920212223242526272829//1. 获取accessToken// 写入默认的url请求private static final String TOKEN_URL =&quot;https://api.weixin.qq.com/cgi-bin/token?grant_type=client_credential&amp;appid=APPID&amp;secret=APPSECRET&quot;; @Testvoid getToken() throws Exception &#123; // 在微信公众号平台默认给的appid String appID = &quot;&quot;; // 在微信公众号平台默认给的secret String secret = &quot;&quot;; URL url = new URL(TOKEN_URL.replace(&quot;APPID&quot;,appID).replace(&quot;APPSECRET&quot;,secret)); URLConnection urlConnection = url.openConnection(); // 如果要发送post请求的话放开以下代码 //设置为可以发送数据的状态// urlConnection.setDoOutput(true);// //获取输出流// OutputStream outputStream = urlConnection.getOutputStream();// outputStream.write(&quot;1111111&quot;.getBytes());// outputStream.close(); InputStream is = urlConnection.getInputStream(); byte [] b = new byte[1024]; int len; StringBuilder sb = new StringBuilder(); while((len=is.read(b))!= -1)&#123; sb.append(new String(b,0,len)); &#125; System.out.println(sb.toString());&#125; 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125//2. 生成小程序码 @Override public String getQrCodeSpare(GetQrCodeVO vo) &#123; try &#123; String pageType = vo.getPageType(); String templateId = vo.getTemplateId(); String prev = vo.getPrev(); String storeCode = vo.getStoreCode(); if (StringUtils.isBlank(storeCode))&#123; List&lt;PageRelevancePO&gt; list = pageRelevanceMapper.selectList(new LambdaQueryWrapper&lt;PageRelevancePO&gt;().eq(PageRelevancePO::getPageConfigureId, templateId)); if (!CollectionUtils.isEmpty(list))&#123; storeCode = list.get(0).getPageStoreId(); &#125; &#125; String accessToken = (String) redisService.get(&quot;INZONE_APPLET_ACCESS_TOKEN&quot;); log.info(&quot;获取的accessToken：&#123;&#125;&quot;,accessToken); String url = &quot;https://api.weixin.qq.com/wxa/getwxacodeunlimit?access_token=&quot;+accessToken; Map&lt;String, Object&gt; param = new HashMap&lt;&gt;(16); StringBuffer sceneStr = new StringBuffer(); sceneStr.append(storeCode).append(&quot;;&quot;).append(templateId).append(&quot;;&quot;).append(prev).append(&quot;;&quot;).append(pageType); log.info(&quot;参数：&#123;&#125;&quot;,sceneStr); //拼入参数 String page = StringUtils.equals(&quot;3&quot;,pageType) ? &quot;www.baidu.com&quot; : &quot;www.xinlang.com&quot;; param.put(&quot;scene&quot;,sceneStr.toString()); //这里的page如果没有的话可以不写，默认是跳主页，如果写了没有的页面的话，会返回错误信息 param.put(&quot;page&quot;,page); param.put(&quot;width&quot;, 430); param.put(&quot;env_version&quot;, &quot;trial&quot;); String json = JSON.toJSONString(param); ByteArrayInputStream inputStream = sendPost(url, json); log.info(&quot;调用sendPost返参:&#123;&#125;&quot;,inputStream.available()); //这里判断的是返回的图片还是错误信息，一般错误信息不会大于200 if (inputStream.available() &lt;= WE_CHAT_SUCCESS_CODE)&#123; ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream(); int i; byte[] buffer = new byte[200]; while ((i = inputStream.read(buffer)) != -1)&#123; byteArrayOutputStream.write(buffer,0,i); &#125; String str = byteArrayOutputStream.toString(); //错误信息的格式在官方文档里有 JSONObject jsonObject = JSONObject.parseObject(str); log.info(&quot;获取小程序码失败:&#123;&#125;&quot;,jsonObject); if (ERR_CODE_ONE.equals(jsonObject.getString(ERR_CODE)))&#123; return &quot;所传page页面不存在，或者小程序没有发布&quot;; &#125;else if (ERR_CODE_TWO.equals(jsonObject.getString(ERR_CODE)))&#123; return &quot;调用分钟频率受限&quot;; &#125; byteArrayOutputStream.close(); return&quot;失败&quot;; &#125; //开始获取数据 String fileName = UUIDUtils.getUUID() + &quot;.png&quot;; //输出到本地的代码 FileOutputStream fileOutputStream = new FileOutputStream(fileName); int i; byte[] buffer = new byte[200]; while ((i = inputStream.read(buffer)) != -1)&#123; fileOutputStream.write(buffer,0,i); &#125; fileOutputStream.flush(); fileOutputStream.close(); inputStream.close(); //使用fastdfs工具类上传图片 FastDfsClient dfsClient = new FastDfsClient(); //上传图片 返回文件服务器地址 String qrUrl = dfsClient.uploadFile(fileName); File file = new File(fileName); if (!file.isDirectory())&#123; log.info(&quot;删除文件结果:&#123;&#125;&quot;,file.delete()); &#125; return qrUrl; &#125; catch (Exception e) &#123; log.error(&quot;生成小程序码失败&quot;,e); &#125; return null; &#125;public static ByteArrayInputStream sendPost(String url, String json) &#123; InputStream inputStream; ByteArrayInputStream byteArrayInputStream = null; // 创建默认的httpClient实例. CloseableHttpClient httpclient = HttpClients.createDefault(); // 创建httppost HttpPost httppost = new HttpPost(url); httppost.addHeader(&quot;Content-type&quot;, &quot;application/json; charset=utf-8&quot;); httppost.setHeader(&quot;Accept&quot;, &quot;application/json&quot;); try &#123; StringEntity s = new StringEntity(json, StandardCharsets.UTF_8); s.setContentEncoding(&quot;UTF-8&quot;); httppost.setEntity(s); HttpResponse response = httpclient.execute(httppost); log.info(&quot;获取小程序码请求地址:&#123;&#125;,入参:&#123;&#125;,返参:&#123;&#125;&quot;,url,json,response); if (response.getStatusLine().getStatusCode() == HttpStatus.SC_OK)&#123; // 获取相应实体 HttpEntity entity = response.getEntity(); inputStream = entity.getContent(); ByteArrayOutputStream outStream = new ByteArrayOutputStream(); // 创建一个Buffer字符串 byte[] buffer = new byte[1024]; // 每次读取的字符串长度，如果为-1，代表全部读取完毕 int len; // 使用一个输入流从buffer里把数据读取出来 while ((len = inputStream.read(buffer)) != -1) &#123; // 用输出流往buffer里写入数据，中间参数代表从哪个位置开始读，len代表读取的长度 outStream.write(buffer, 0, len); &#125; // 关闭输入流 inputStream.close(); // 把outStream里的数据写入内存 byteArrayInputStream = new ByteArrayInputStream(outStream.toByteArray()); &#125; &#125; catch (Exception e) &#123; log.error(&quot;生成小程序码失败&quot;,e); &#125; finally &#123; // 关闭连接,释放资源 try &#123; httpclient.close(); &#125; catch (IOException e) &#123; log.error(&quot;生成小程序码失败&quot;,e); &#125; &#125; return byteArrayInputStream; &#125;","tags":["Java"],"categories":["Java开发"]},{"title":"Hello World","path":"/2023/01/28/hello-world/","content":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new &quot;My New Post&quot; More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":["设计开发","iOS开发"]}]